{"ast":null,"code":"var _jsxFileName = \"/Users/hbaswa/Desktop/Treasury V2 OLB/frontend/src/components/Tweet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Container, Table, TableCell, TableHead, TableBody, TableRow, Typography } from '@material-ui/core';\nimport { Line as LineChart, Bar as BarChart } from 'react-chartjs-2';\n/*import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nfunction Tweet() {\n    useEffect( () => {\n        fetchItems();\n    }, []);\n\n    const [items, setItems] = useState([]);\n\n    const fetchItems = async () => {\n        const data = await fetch('http://localhost:4000/data');\n        console.log(\"harsha\", data);\n        const items = await data.json();\n        setItems(items);\n    };\n\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n            position: 'top',\n            },\n            title: {\n            display: true,\n            text: 'Chart.js Bar Chart',\n            },\n        },\n    };\n      \n    const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n    const data = {\n        labels,\n        datasets: [\n            {\n            label: 'Dataset 1',\n            data: items.map(row => row.voting_choice),\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            }\n        ],\n    };\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tweet() {\n  _s();\n  const [items, setItems] = useState([]);\n  const [barChartData, setBarChartData] = useState({});\n  useEffect(() => {\n    fetchItems();\n\n    // Fetch bar chart data for overall results\n    axios.get('http://localhost:4000/results').then(response => {\n      console.log('hey hi ', response.data.data);\n      const counts = response.data.data.map(item => item.count);\n      console.log('hey hi ', counts);\n      const choices = response.data.data.map(item => item.voting_choice ? 'True' : 'False');\n      console.log('hey hi ', choices);\n      // setBarChartData({\n      //     labels: choices,\n      //     datasets: [{ data: counts, backgroundColor: ['blue', 'red'] }],\n      // });\n    });\n    //console.log('hey hi ',barChartData);\n  }, []);\n  const fetchItems = async () => {\n    const data = await fetch('http://localhost:4000/data');\n    console.log(\"harsha\", data);\n    const items = await data.json();\n    setItems(items);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        class: \"mt-5\",\n        children: \"Votes Table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Polling System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Vote Choice\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Date of Submission\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: items.map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.voting_choice ? 'True' : 'False'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.casted_at\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"650px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          // Name of the variables on x-axies for each bar\n          labels: [\"1st bar\", \"2nd bar\", \"3rd bar\", \"4th bar\"],\n          datasets: [{\n            // Label for bars\n            label: \"total count/value\",\n            // Data or value of your each variable\n            data: [1552, 1319, 613, 1400],\n            // Color of each bar\n            backgroundColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n            // Border color of each bar\n            borderColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n            borderWidth: 0.5\n          }]\n        }\n        // Height of graph\n        ,\n        height: 400,\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [{\n              ticks: {\n                // The y-axis value will start from zero\n                beginAtZero: true\n              }\n            }]\n          },\n          legend: {\n            labels: {\n              fontSize: 15\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(Tweet, \"5hd7dov9zSi9HbWq1kQOkyE8tkY=\");\n_c = Tweet;\nexport default Tweet;\nvar _c;\n$RefreshReg$(_c, \"Tweet\");","map":{"version":3,"names":["React","useEffect","useState","axios","Container","Table","TableCell","TableHead","TableBody","TableRow","Typography","Line","LineChart","Bar","BarChart","jsxDEV","_jsxDEV","Tweet","_s","items","setItems","barChartData","setBarChartData","fetchItems","get","then","response","console","log","data","counts","map","item","count","choices","voting_choice","fetch","json","children","class","fileName","_jsxFileName","lineNumber","columnNumber","variant","name","casted_at","id","style","maxWidth","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","legend","fontSize","_c","$RefreshReg$"],"sources":["/Users/hbaswa/Desktop/Treasury V2 OLB/frontend/src/components/Tweet.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport { Container, Table, TableCell,TableHead,TableBody, TableRow, Typography } from '@material-ui/core';\nimport { Line as LineChart, Bar as BarChart } from 'react-chartjs-2';\n/*import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\nfunction Tweet() {\n    useEffect( () => {\n        fetchItems();\n    }, []);\n\n    const [items, setItems] = useState([]);\n\n    const fetchItems = async () => {\n        const data = await fetch('http://localhost:4000/data');\n        console.log(\"harsha\", data);\n        const items = await data.json();\n        setItems(items);\n    };\n\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n            position: 'top',\n            },\n            title: {\n            display: true,\n            text: 'Chart.js Bar Chart',\n            },\n        },\n    };\n      \n    const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n    const data = {\n        labels,\n        datasets: [\n            {\n            label: 'Dataset 1',\n            data: items.map(row => row.voting_choice),\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            }\n        ],\n    };\n*/\nfunction Tweet() {\n    const [items, setItems] = useState([]);\n    const [barChartData, setBarChartData] = useState({});\n    useEffect( () => {\n        fetchItems();\n        \n        // Fetch bar chart data for overall results\n        axios.get('http://localhost:4000/results').then((response) => {\n        console.log('hey hi ',response.data.data);\n        const counts = response.data.data.map((item) => item.count);\n        console.log('hey hi ',counts);\n        const choices = response.data.data.map((item) => item.voting_choice ? 'True' : 'False');\n        console.log('hey hi ',choices);\n        // setBarChartData({\n        //     labels: choices,\n        //     datasets: [{ data: counts, backgroundColor: ['blue', 'red'] }],\n        // });\n        });\n        //console.log('hey hi ',barChartData);\n    }, []);\n\n    const fetchItems = async () => {\n        const data = await fetch('http://localhost:4000/data');\n        console.log(\"harsha\", data);\n        const items = await data.json();\n        setItems(items);\n    };\n\n    return(\n        <section>   \n            <div class=\"container-fluid\">\n                <h1 class=\"mt-5\">Votes Table</h1>\n                <Typography variant=\"h4\">Polling System</Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Vote Choice</TableCell>\n                            <TableCell>Date of Submission</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {items.map((item) => (\n                        <TableRow key={item.id}>\n                            <TableCell>{item.name}</TableCell>\n                            <TableCell>{item.voting_choice ? 'True' : 'False'}</TableCell>\n                            <TableCell>{item.casted_at}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </div>\n            {/* <Bar options={options} data={data} /> */}\n            {/* <BarChart data={barChartData} /> */}\n            <div style={{ maxWidth: \"650px\" }}>\n                <Bar\n                data={{\n                    // Name of the variables on x-axies for each bar\n                    labels: [\"1st bar\", \"2nd bar\", \"3rd bar\", \"4th bar\"],\n                    datasets: [\n                    {\n                        // Label for bars\n                        label: \"total count/value\",\n                        // Data or value of your each variable\n                        data: [1552, 1319, 613, 1400],\n                        // Color of each bar\n                        backgroundColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n                        // Border color of each bar\n                        borderColor: [\"aqua\", \"green\", \"red\", \"yellow\"],\n                        borderWidth: 0.5,\n                    },\n                    ],\n                }}\n                // Height of graph\n                height={400}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                    yAxes: [\n                        {\n                        ticks: {\n                            // The y-axis value will start from zero\n                            beginAtZero: true,\n                        },\n                        },\n                    ],\n                    },\n                    legend: {\n                    labels: {\n                        fontSize: 15,\n                    },\n                    },\n                }}\n                />\n            </div>\n        </section>\n    );\n}\n\nexport default Tweet;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAACC,SAAS,EAACC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,mBAAmB;AACzG,SAASC,IAAI,IAAIC,SAAS,EAAEC,GAAG,IAAIC,QAAQ,QAAQ,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA,SAAAC,MAAA,IAAAC,OAAA;AA2DA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpDD,SAAS,CAAE,MAAM;IACbsB,UAAU,CAAC,CAAC;;IAEZ;IACApB,KAAK,CAACqB,GAAG,CAAC,+BAA+B,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MAC9DC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC;MACzC,MAAMC,MAAM,GAAGJ,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC;MAC3DN,OAAO,CAACC,GAAG,CAAC,SAAS,EAACE,MAAM,CAAC;MAC7B,MAAMI,OAAO,GAAGR,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,aAAa,GAAG,MAAM,GAAG,OAAO,CAAC;MACvFR,OAAO,CAACC,GAAG,CAAC,SAAS,EAACM,OAAO,CAAC;MAC9B;MACA;MACA;MACA;IACA,CAAC,CAAC;IACF;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMX,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMM,IAAI,GAAG,MAAMO,KAAK,CAAC,4BAA4B,CAAC;IACtDT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEC,IAAI,CAAC;IAC3B,MAAMV,KAAK,GAAG,MAAMU,IAAI,CAACQ,IAAI,CAAC,CAAC;IAC/BjB,QAAQ,CAACD,KAAK,CAAC;EACnB,CAAC;EAED,oBACIH,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAKuB,KAAK,EAAC,iBAAiB;MAAAD,QAAA,gBACxBtB,OAAA;QAAIuB,KAAK,EAAC,MAAM;QAAAD,QAAA,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjC3B,OAAA,CAACN,UAAU;QAACkC,OAAO,EAAC,IAAI;QAAAN,QAAA,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACpD3B,OAAA,CAACX,KAAK;QAAAiC,QAAA,gBACFtB,OAAA,CAACT,SAAS;UAAA+B,QAAA,eACNtB,OAAA,CAACP,QAAQ;YAAA6B,QAAA,gBACLtB,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAC;YAAI;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAW,CAAC,eAC3B3B,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAC;YAAW;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAW,CAAC,eAClC3B,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAC;YAAkB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAW,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACZ3B,OAAA,CAACR,SAAS;UAAA8B,QAAA,EACLnB,KAAK,CAACY,GAAG,CAAEC,IAAI,iBAChBhB,OAAA,CAACP,QAAQ;YAAA6B,QAAA,gBACLtB,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAEN,IAAI,CAACa;YAAI;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAClC3B,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAEN,IAAI,CAACG,aAAa,GAAG,MAAM,GAAG;YAAO;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eAC9D3B,OAAA,CAACV,SAAS;cAAAgC,QAAA,EAAEN,IAAI,CAACc;YAAS;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA,GAH5BX,IAAI,CAACe,EAAE;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIR,CACb;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eAGN3B,OAAA;MAAKgC,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAQ,CAAE;MAAAX,QAAA,eAC9BtB,OAAA,CAACH,GAAG;QACJgB,IAAI,EAAE;UACF;UACAqB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;UACpDC,QAAQ,EAAE,CACV;YACI;YACAC,KAAK,EAAE,mBAAmB;YAC1B;YACAvB,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC;YAC7B;YACAwB,eAAe,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;YACnD;YACAC,WAAW,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;YAC/CC,WAAW,EAAE;UACjB,CAAC;QAEL;QACA;QAAA;QACAC,MAAM,EAAE,GAAI;QACZC,OAAO,EAAE;UACLC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE;YACRC,KAAK,EAAE,CACH;cACAC,KAAK,EAAE;gBACH;gBACAC,WAAW,EAAE;cACjB;YACA,CAAC;UAEL,CAAC;UACDC,MAAM,EAAE;YACRb,MAAM,EAAE;cACJc,QAAQ,EAAE;YACd;UACA;QACJ;MAAE;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAElB;AAACzB,EAAA,CAjGQD,KAAK;AAAAgD,EAAA,GAALhD,KAAK;AAmGd,eAAeA,KAAK;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}